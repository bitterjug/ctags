Cons a	input.elm	/^    = Cons a$/;"	c	type:Param a
Json.Encode as Je	input.elm	/^import Json.Encode as Je$/;"	i
List	input.elm	/^import List$/;"	i
Main	input.elm	/^port module Main exposing (..)$/;"	m
Maybe	input.elm	/^import Maybe exposing (withDefault)$/;"	i
Num	input.elm	/^type alias Num =$/;"	a
One	input.elm	/^    = One$/;"	c	type:Thing
Other a	input.elm	/^    | Other a$/;"	c	type:Param a
Param a	input.elm	/^type Param a$/;"	t
Thing	input.elm	/^type Thing$/;"	t
Two Int	input.elm	/^    | Two Int$/;"	c	type:Thing
bar	input.elm	/^bar =$/;"	f
bas	input.elm	/^        bas =$/;"	f	function:bar
foo	input.elm	/^foo a =$/;"	f
inward	input.elm	/^port inward : (b -> a) -> Sub a$/;"	p
outward	input.elm	/^port outward : String -> Cmd a$/;"	p
